## Facade Main Configuration
#
# This subset of the overall configuration contains all the elements required in order to configure
# the facade for a given environment

# This is an optional identifier for the running instance of the facade. It will be returned in a standard facade header
# (X-FACADE-SYSTEM-ID), and will also be encapsulated within "ping" responses.
facade.system.identifier="erebus"

# OTCS web service credentials
facade.cws.user="Admin"
facade.cws.password="livelink"
facade.token.cache.lifetime=15 minutes
facade.id.cache.lifetime=24 hours
facade.json.cache.lifetime=5 minutes
facade.node.cache.lifetime=5 minutes
facade.maximum.traversal.depth=4
facade.db.schema="dbo"

# CWS Service Configuration - modify the endpoints here to suit your environment. You can also switch on (verbose) SOAP debugging by
# enabling the debugLog flag for each service

# The admin service - used during ping requests
play.soap.services.com.opentext.cws.admin.AdminService_Service.address="http://otcs-host/cws/AdminService.svc"
play.soap.services.com.opentext.cws.admin.AdminService_Service.debugLog=false
# The authentication service - used to obtain valid authentication tokens
play.soap.services.com.opentext.cws.authentication.Authentication_Service.address="http://otcs-host/cws/Authentication.svc"
play.soap.services.com.opentext.cws.authentication.Authentication_Service.debugLog=false
# The content service - used during document downloads
play.soap.services.com.opentext.cws.content.ContentService_Service.address="http://otcs-host/cws/ContentService.svc"
play.soap.services.com.opentext.cws.content.ContentService_Service.debugLog=false
# The document management service - used during content uploads and updates
play.soap.services.com.opentext.cws.docman.DocumentManagement_Service.address="http://otcs-host/cws/DocumentManagement.svc"
play.soap.services.com.opentext.cws.docman.DocumentManagement_Service.debugLog=false

# Path expansions. These expansions allow a mapping for "top-level" path elements to paths within the underlying repository
# So, for example a mapping "workspace" : "Enterprise/Business Workspaces" will mean that when "workspace" is seen as the first
# element in a path, it will be automatically expanded to "Enterprise/Business Workspaces" by the facade repository layer
facade.path.expansions = [
  { "workspace" : "Enterprise/Business Workspaces"}
]


# This is a timings filter which will provide timings information for each request. The timings information will also be written out to a
# specific timings log at the level TRACE, if configured
play.filters.enabled += facade.filters.TimingFilter

# Custom global error handler that is used to catch any unhandled throwables and convert to a wrapped json response
play.http.errorHandler = "facade.controllers.GlobalErrorHandler"

# DO NOT MODIFY
# Different cache bindings for the internals
play.cache.bindCaches = ["db-cache", "token-cache", "json-cache", "node-cache"]

## Configuration of the underlying OTCS data source
# This should be SQL Server 2012+
# DO NOT MODIFY THE DRIVER CLASS SPECIFICATION WITHIN THIS SECTION. THE URL USED WITHIN HERE SHOULD REFLECT THE UNDERLYING OTCS DATABASE
# AND APPROPRIATE USER CREDENTIALS
db {
  default.driver = com.microsoft.sqlserver.jdbc.SQLServerDriver
  default.url = "jdbc:sqlserver://otcs-host;databaseName=otcs;user=otcs;password=livelink"
  default.logSql=true
}

## CWS ENDPOINT CONFIGURATION - THIS SHOULD BE CHANGED TO SUITE THE TARGET OTCS REPOSITORY (PER ENVIRONMENT FOR INSTANCE)



## DISPATCHERS - DO NOT ALTER WITHOUT GUIDANCE
# This section configures the thread pool to be used by the SQL context within the facade main business logic.
# Do not alter the values within this section unless recommended by JCS support

# Number of db connections within the connection pool ((physical cores * 2) + effective spindle count)a
poolConnections=17
numCores=8
otcsThreadCount=8

## SQL DISPATCHER
# A custom dispatcher (alternative to the main play framework dispatcher) which is used to execute SQL ops
facade.sql.dispatcher {
  executor = "thread-pool-executor"
  throughput = 1
  thread-pool-executor{
    fixed-pool-size = ${poolConnections}
  }
}

## REPOSITORY DISPATCHER
# This section configures the thread pool to be used by the repository service within the facade main business logic.
# Do not alter the values within this section unless recommended by JCS support
facade.repository.dispatcher {
  executor = "thread-pool-executor"
  throughput = 1
  thread-pool-executor{
    fixed-pool-size = ${numCores}
  }
}

## CWS PROXY DISPATCHER
# This section configures the thread pool to be used by the CWS proxy within the facade main business logic.
# Do not alter the values within this section unless recommended by JCS support
facade.cws.dispatcher {
  executor = "thread-pool-executor"
  throughput = 1
  thread-pool-executor{
    fixed-pool-size = ${otcsThreadCount}
  }
}