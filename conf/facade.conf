#######################################################################################################################################
## Facade Main Configuration
#
# The general configuration settings for the Facade
#######################################################################################################################################

# This is an optional identifier for the running instance of the facade. It will be returned in a standard facade header
# (X-FACADE-SYSTEM-ID), and will also be encapsulated within "ping" responses.
facade.system.identifier="erebus"

# If this configuration setting is set to *true*, then the current authentication token will be returned in response to a ping request.
# Use only for debugging and diagnostic purposes, in production environments this should be set to FALSE.
facade.ping.token=true

# Various different caches used internally by the facade. Do not change these values unless you know what you're doing!
facade.token.cache.lifetime=15 minutes
facade.db.cache.lifetime=5 minutes
facade.json.cache.lifetime=5 minutes
facade.node.cache.lifetime=1 hour

# The is the maximum and default depths that a meta-data retrieval request will recurse into. Setting this to a high value will impact the
# performance of meta-data retrieval calls.  The default value is zero (with no child objects being traversed).  This is to prevent
# retrieval of *all* sub-folders in situations where a path expansion (for example /workspace) contains a *huge* number of child objects.
facade.default.traversal.depth=0
facade.maximum.traversal.depth=4

# Path expansions. These expansions allow a mapping for "top-level" path elements to paths within the underlying repository
# So, for example a mapping "workspace" : "Enterprise/Business Workspaces" will mean that when "workspace" is seen as the first
# element in a path, it will be automatically expanded to "Enterprise/Business Workspaces" by the facade repository layer
facade.path.expansions = [
  { "workspace" : "Enterprise/Business Workspaces"}
]

#######################################################################################################################################
## Facade Data Source Configuration
# This should be SQL Server 2012+
# DO NOT MODIFY THE DRIVER CLASS SPECIFICATION WITHIN THIS SECTION. THE URL USED WITHIN HERE SHOULD REFLECT THE UNDERLYING OTCS DATABASE
# AND APPROPRIATE USER CREDENTIALS
#######################################################################################################################################
# The schema within the OTCS database containing all the CS tables, along with the Facade support views
facade.db.schema="dbo"
db {
  default.driver = com.microsoft.sqlserver.jdbc.SQLServerDriver
  default.url = "jdbc:sqlserver://otcs-host;databaseName=otcs;user=otcs;password=otcs"
  default.logSql=true
}


#######################################################################################################################################
## Facade Notification Settings
# Specify a HTTP endpoint
facade.notification.endpoint="http://localhost:9995"

#######################################################################################################################################

#######################################################################################################################################
# Facade CWS Service Configuration
# Modify the endpoints here to suit your environment. You can also switch on (verbose) SOAP debugging by  #
# enabling the debugLog flag for each service
#######################################################################################################################################
# OTCS web service credentials
facade.cws.user="Admin"
facade.cws.password="livelink"
# The admin service - used during ping requests
play.soap.services.com.opentext.cws.admin.AdminService_Service.address="http://otcs-host/cws/AdminService.svc"
play.soap.services.com.opentext.cws.admin.AdminService_Service.debugLog=false
# The authentication service - used to obtain valid authentication tokens
play.soap.services.com.opentext.cws.authentication.Authentication_Service.address="http://otcs-host/cws/Authentication.svc"
play.soap.services.com.opentext.cws.authentication.Authentication_Service.debugLog=false
# The content service - used during document downloads
play.soap.services.com.opentext.cws.content.ContentService_Service.address="http://otcs-host/cws/ContentService.svc"
play.soap.services.com.opentext.cws.content.ContentService_Service.debugLog=false
# The document management service - used during content uploads and updates
play.soap.services.com.opentext.cws.docman.DocumentManagement_Service.address="http://otcs-host/cws/DocumentManagement.svc"
play.soap.services.com.opentext.cws.docman.DocumentManagement_Service.debugLog=false

##############################################################################################
## CONFIGURATION ELEMENTS BELOW THIS LINE SHOULD NOT BE ALTERED UNLESS INSTRUCTED TO DO SO...#
##############################################################################################

# This is a timings filter which will provide timings information for each request. The timings information will also be written out to a
# specific timings log at the level TRACE, if configured
play.filters.enabled += facade.filters.TimingFilter

# Gzip encoding of json reponses and a number of document types is enabled by default.  More
play.filters.enabled += play.filters.gzip.GzipFilter
play.filters.gzip {
  contentType {
    #whiteList = ["application/json"]
    #blackList = []
  }
}

# Custom global error handler that is used to catch any unhandled throwables and convert to a wrapped json response
play.http.errorHandler = facade.controllers.GlobalErrorHandler

# DO NOT MODIFY
# Different cache bindings for the internals
play.cache.bindCaches = ["db-cache", "token-cache", "json-cache", "node-cache"]

## DISPATCHERS - DO NOT MODIFY WITHOUT GUIDANCE
# This section configures the thread pool to be used by the SQL context within the facade main business logic.
# Do not alter the values within this section unless recommended by JCS support

# Number of db connections within the connection pool
poolConnections=8
# Number of cores available
numCores=8
# Backend (CWS) thread count
otcsThreadCount=8

## SQL DISPATCHER
# A custom dispatcher (alternative to the main play framework dispatcher) which is used to execute SQL ops
facade.sql.dispatcher {
  executor = "thread-pool-executor"
  throughput = 1
  thread-pool-executor{
    fixed-pool-size = ${poolConnections}
  }
}

## REPOSITORY DISPATCHER
# This section configures the thread pool to be used by the repository service within the facade main business logic.
# Do not alter the values within this section unless recommended by JCS support
facade.repository.dispatcher {
  executor = "thread-pool-executor"
  throughput = 1
  thread-pool-executor{
    fixed-pool-size = ${numCores}
  }
}

## CWS PROXY DISPATCHER
# This section configures the thread pool to be used by the CWS proxy within the facade main business logic.
# Do not alter the values within this section unless recommended by JCS support
facade.cws.dispatcher {
  executor = "thread-pool-executor"
  throughput = 1
  thread-pool-executor{
    fixed-pool-size = ${otcsThreadCount}
  }
}